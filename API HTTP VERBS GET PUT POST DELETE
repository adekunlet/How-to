{
  "GET /lions": {
    "desc": "returns all lions",
    "response": "200 application/json",
    "data": [{}, {}, {}]
  },

  "GET /lions/:id": {
    "desc": "returns one lion respresented by its id",
    "response": "200 application/json",
    "data": {}
  },

  "POST /lions": {
    "desc": "create and returns a new lion uisng the posted object as the lion",
    "response": "201 application/json",
    "data": {}
  },

  "PUT /lions/:id": {
    "desc": "updates and returns the matching lion with the posted update object",
    "response": "200 application/json",
    "data": {}
  },

  "DELETE /lions/:id": {
    "desc": "deletes and returns the matching lion",
    "response": "200 application/json",
    "data": {}
  }
}

// TODO: make this work.
// if yuo go to localhost:3000 the app
// there is expected crud to be working here
var express = require('express');
var bodyParser = require('body-parser');
var app = express();
var _ = require('lodash');

// express.static will serve everything
// with in client as a static resource
// also, it will server the index.html on the
// root of that directory on a GET to '/'
app.use(express.static('client'));

// body parser makes it possible to post JSON to the server
// we can accss data we post on as req.body
app.use(bodyParser.urlencoded({extended: true}));
app.use(bodyParser.json());


var lions = [];
var id = 0;

// TODO: make the REST routes to perform CRUD on lions
// Get
app.get('/lions', function(req,res){
    res.json(lions);
});

app.get('/lions/:id', function(req,res){
    var lion = _.find(lions, {id: req.params.id});
    res.json(lion||undefined);
});

// Post
app.post('/lions', function(req, res) {
    var lion = req.body;
    id++;
    lion.id = id + '';

    // add the new lion to the array
    lions.push(lion);
    // res.send converts to json as well
    // but req.json will convert things like null and undefined to json too although its not valid
    res.json(lion);
  });

  app.put('/lion/:id', function(req,res){
      var updatedLion = req.body();
      if(updatedLion.id){
        delete update.id;
      }

      var lionId = _.findIndex(lions,{id: req.params.id});

      if(!lions[lion]){
          res.send();
      }else{
          var updatedLions = _.assign(lions[lionId], updatedLion );
          res(updatedLions);
      }
  });

  app.delete('/lion/:id', function(req,res){
      var lionId = _.findIndex(lions,{id: req.params.id});
      if(!lions[lionId]){
          res.send();
      }else{
          var deletedLion = Lions[lionId];
          lions.splice(lionId, 1);
          res.json(deletedLion);
      }
  })


app.listen(3000);
console.log('on port 3000');



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// USING ROUTING IN EXPRESS
// TODO: mount the tigers route with a a new router just for tigers
// exactly like lions below
var express = require('express');
var bodyParser = require('body-parser');
var app = express();
var _ = require('lodash');
var morgan = require('morgan');

var lionRouter = require('./lions');
var tigerRouter = require('./tigers');

app.use(morgan('dev'))
app.use(express.static('client'));
app.use(bodyParser.urlencoded({extended: true}));
app.use(bodyParser.json());
// this is called mounting. when ever a req comes in for
// '/lion' we want to use this router
app.use('/lions', lionRouter);
app.use('/tigers', tigerRouter);

app.use(function(err, req, res, next) {
  if (err) {
    console.log(err.message);
    res.status(500).send(error);
  }
});


app.listen(3000);
console.log('on port 3000');


// TODO: make a new router for the tigers resource
// and make some REST routes for it, exactly like for lions
// make a middleware that just logs the word 'tiger' to the console
// when a request comes in to the server

var tigerRouter = require('express').Router();
var _ = require('lodash');

var tigers = [];
var id = 0;

var updateId = function(req, res, next) {
  if (!req.body.id) {
    id++;
    req.body.id = id + '';
  }
  next();
};

tigerRouter.param('id', function(req, res, next, id) {
  var todo = _.find(todos, {id: id});

  if (todo) {
    req.todo = todo;
    next();
  } else {
    res.send();
  }
});

tigerRouter.route('/')
.get(function(req, res){
    res.json(tigers);
})
.post(updateId, function(req, res) {
    var tiger = req.body;
    tigers.push(tiger);
    res.json(tiger);
})
.delete(function(req, res){
    var tigerId = _.findIndex(tigers, {id: req.params.id});
    tigers.splice(tigerId,1);
    res.json(req.tiger);
});

tigerRouter.route('/:id')
.get(function(req, res){
    var tiger = req.todo;
    res.json(tiger || {});
 })
.put(function(req, res) {
    var update = req.body;
    if (update.id) {
      delete update.id
    }
    var tiger = _.findIndex(tigers, {id: req.params.id});
    if (!tigers[tiger]) {
      res.send();
    } else {
      var updatedTiger = _.assign(tigers[tiger], update);
      res.json(updatedTiger);
    }
  });

tigerRouter.get('/tiger', function(req, res){
    res.json(tigers);
  });

module.exports = tigerRouter;

