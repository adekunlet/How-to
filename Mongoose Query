// find always returns an array or error

Model.find({}, function(err, documents) {
  if (err) {
    next(err);
  } else {
    res.json(documents);
  }
})

// find by Id
Model.findById('57490284328430', function(err, doc) {
  if (err) {
    next(err);
  } else {
    res.json(doc);
  }
});

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

// few ways to create a new document

  var dog = new Dog({
    name: 'Bingo'
  });

  dog.save(function(err, savedDog) {
    if (err) {
      next(err)
    } else {
      res.json(savedDog);
    }
  });
  /////////////////////

  Dog.create({name: 'Bingo'}, function(err, savedDog) {

  })
  //////////////////////

  var dog = new Dog();

  dog.name = 'Bingo';

  dog.save(function(err, savedDog) {

  });
  
  ///////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////
  
  Model.findByIdAndUpdate('28393928392', {name: 'new name'}, function(err, updatedDoc){
  if (err) {
    next(err)
  } else {
    res.json(updatedDoc);
  }
});

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

Model.findOne({name: 'Jan'}, function(err, doc) {
  doc.remove(function(err, removedDoc) {
    // just deleted the document from the DB
  });
})
          
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

// promises / joining tables

var DogSchema = new mongoose.Schema({
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'person'
  },
  name: String
});

var PersonSchema = new mongoose.Schema({
  name: String
});

var Dog = mongoose.model('dog', DogSchema);
var Person = mongoose.model('person', PersonSchema);

// find all dogs and populate their owners
// this will grab the ids on the owners field
// and go to the ref, which is the person model
// and grab the person doc with the matching id
// and place the object on the owners field
var promise = Dog.find({})
  .populate('owner')
  .exec();

  promise.then(function(dogs) {

  }, function(err) {

  });
